pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TF_STATE_BUCKET    = 'sajal-s3-demo-1.1.1.3'
        TF_LOCK_TABLE      = 'terraform-lock'
        AWS_CREDS          = credentials('aws-credentials-id') // Jenkins AWS credentials
    }

    triggers {
        // GitHub webhook triggers automatically
        githubPush()
    }

    stages {

        stage('Checkout') {
            steps {
                // Checkout only staging branch
                git branch: 'staging', url: 'https://github.com/org/terraform-infra.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir("envs/staging") {
                    sh """
                        terraform init \
                        -backend-config="bucket=$TF_STATE_BUCKET" \
                        -backend-config="key=staging/terraform.tfstate" \
                        -backend-config="region=$AWS_DEFAULT_REGION" \
                        -backend-config="dynamodb_table=$TF_LOCK_TABLE"
                    """
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("env/staging") {
                    sh 'terraform plan -out=tfplan -var="environment=staging" -input=false'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("env/staging") {
                    // Optional: automatic apply or require manual approval
                    input message: "Approve Terraform Apply for STAGING?", ok: 'Apply'
                    sh 'terraform apply tfplan'
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/terraform.tfstate*', fingerprint: true
        }
        success {
            echo "Terraform staging deployment completed successfully."
        }
        failure {
            echo "Terraform staging deployment FAILED."
        }
    }
}
